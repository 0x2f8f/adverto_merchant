<?php

namespace App\Adverts\Entity;

use App\Core\Entity\Lang;
use App\Core\Entity\Country;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * Category
 *
 * @ORM\Table(name="adv_category", uniqueConstraints={@ORM\UniqueConstraint(name="slug_id", columns={"slug_id"})}, indexes={@ORM\Index(name="id_lang", columns={"id_lang"})})
 * @ORM\Entity
 */
class Category
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @var int
     *
     * @ORM\Column(name="id_parent", type="integer", nullable=false)
     */
    private $idParent;

    /**
     * @var int
     *
     * @ORM\Column(name="sort", type="integer", nullable=false)
     */
    private $sort = '0';

    /**
     * @var string
     *
     * @ORM\Column(name="slug_id", type="string", length=255, nullable=false)
     */
    private $slugId;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=200, nullable=false)
     */
    private $name;

    /**
     * @var string|null
     *
     * @ORM\Column(name="icon", type="text", length=65535, nullable=true)
     */
    private $icon;

    /**
     * @var bool
     *
     * @ORM\Column(name="enabled", type="boolean", nullable=false, options={"default"="1","comment"="Тут глобальное отключение категории"})
     */
    private $enabled = true;

    /**
     * @var bool
     *
     * @ORM\Column(name="is_product", type="boolean", nullable=false, options={"default"="1"})
     */
    private $isProduct = true;

    /**
     * @var bool
     *
     * @ORM\Column(name="have_child", type="boolean", nullable=false, options={"comment"="Есть ли дети у этой категории"})
     */
    private $haveChild = '0';

    /**
     * @var int|null
     *
     * @ORM\Column(name="id_root", type="integer", nullable=true)
     */
    private $idRoot;

    /**
     * @var int|null
     *
     * @ORM\Column(name="lvl", type="integer", nullable=true)
     */
    private $lvl;

    /**
     * @var int|null
     *
     * @ORM\Column(name="lft", type="integer", nullable=true)
     */
    private $lft;

    /**
     * @var int|null
     *
     * @ORM\Column(name="rgt", type="integer", nullable=true)
     */
    private $rgt;

    /**
     * @var bool
     *
     * @ORM\Column(name="allow_video", type="boolean", nullable=false)
     */
    private $allowVideo = '0';

    /**
     * @var bool
     *
     * @ORM\Column(name="title_auto_generated", type="boolean", nullable=false)
     */
    private $titleAutoGenerated = '0';

    /**
     * @var string
     *
     * @ORM\Column(name="screen_type", type="string", length=0, nullable=false, options={"default"="simple","comment"="тип отображения экрана категории"})
     */
    private $screenType = 'simple';

    /**
     * @var bool
     *
     * @ORM\Column(name="allow_free", type="boolean", nullable=false, options={"default"="1","comment"="Товар или услуга по этой категории могут быть бесплатны"})
     */
    private $allowFree = true;

    /**
     * @var int
     *
     * @ORM\Column(name="description_length_max", type="smallint", nullable=false, options={"default"="2000","unsigned"=true})
     */
    private $descriptionLengthMax = '2000';

    /**
     * @var bool
     *
     * @ORM\Column(name="enabled_360_view", type="boolean", nullable=false)
     */
    private $enabled360View = '0';

    /**
     * @var int
     *
     * @ORM\Column(name="min_photos", type="smallint", nullable=false, options={"unsigned"=true})
     */
    private $minPhotos = '0';

    /**
     * @var int
     *
     * @ORM\Column(name="max_photos", type="smallint", nullable=false, options={"default"="20","unsigned"=true})
     */
    private $maxPhotos = '20';

    /**
     * @var bool
     *
     * @ORM\Column(name="allow_secure_deal", type="boolean", nullable=false)
     */
    private $allowSecureDeal = '0';

    /**
     * @var int
     *
     * @ORM\Column(name="max_video_duration", type="smallint", nullable=false, options={"unsigned"=true,"comment"="в секундах. 0 - неограничено"})
     */
    private $maxVideoDuration = '0';

    /**
     * @var string
     *
     * @ORM\Column(name="map_display_type", type="string", length=0, nullable=false, options={"default"="collapsed"})
     */
    private $mapDisplayType = 'collapsed';

    /**
     * @var bool
     *
     * @ORM\Column(name="allow_used", type="boolean", nullable=false, options={"default"="1"})
     */
    private $allowUsed = true;

    /**
     * @var bool
     *
     * @ORM\Column(name="age_restricted", type="boolean", nullable=false)
     */
    private $ageRestricted = '0';

    /**
     * @var int
     *
     * @ORM\Column(name="moderation_limit", type="smallint", nullable=false, options={"unsigned"=true,"comment"="ограничение времени на модерацию в секундах"})
     */
    private $moderationLimit;

    /**
     * @var Lang
     *
     * @ORM\ManyToOne(targetEntity="App\Core\Entity\Lang")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="id_lang", referencedColumnName="id")
     * })
     */
    private $idLang;

    /**
     * @var \Doctrine\Common\Collections\Collection
     *
     * @ORM\ManyToMany(targetEntity="App\Core\Entity\Country", inversedBy="category")
     * @ORM\JoinTable(name="adv_category_min_price",
     *   joinColumns={
     *     @ORM\JoinColumn(name="category_id", referencedColumnName="id")
     *   },
     *   inverseJoinColumns={
     *     @ORM\JoinColumn(name="country_iso", referencedColumnName="iso")
     *   }
     * )
     */
    private $countryIso;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->countryIso = new \Doctrine\Common\Collections\ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getIdParent(): ?int
    {
        return $this->idParent;
    }

    public function setIdParent(int $idParent): self
    {
        $this->idParent = $idParent;

        return $this;
    }

    public function getSort(): ?int
    {
        return $this->sort;
    }

    public function setSort(int $sort): self
    {
        $this->sort = $sort;

        return $this;
    }

    public function getSlugId(): ?string
    {
        return $this->slugId;
    }

    public function setSlugId(string $slugId): self
    {
        $this->slugId = $slugId;

        return $this;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    public function getIcon(): ?string
    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;

        return $this;
    }

    public function getEnabled(): ?bool
    {
        return $this->enabled;
    }

    public function setEnabled(bool $enabled): self
    {
        $this->enabled = $enabled;

        return $this;
    }

    public function getIsProduct(): ?bool
    {
        return $this->isProduct;
    }

    public function setIsProduct(bool $isProduct): self
    {
        $this->isProduct = $isProduct;

        return $this;
    }

    public function getHaveChild(): ?bool
    {
        return $this->haveChild;
    }

    public function setHaveChild(bool $haveChild): self
    {
        $this->haveChild = $haveChild;

        return $this;
    }

    public function getIdRoot(): ?int
    {
        return $this->idRoot;
    }

    public function setIdRoot(?int $idRoot): self
    {
        $this->idRoot = $idRoot;

        return $this;
    }

    public function getLvl(): ?int
    {
        return $this->lvl;
    }

    public function setLvl(?int $lvl): self
    {
        $this->lvl = $lvl;

        return $this;
    }

    public function getLft(): ?int
    {
        return $this->lft;
    }

    public function setLft(?int $lft): self
    {
        $this->lft = $lft;

        return $this;
    }

    public function getRgt(): ?int
    {
        return $this->rgt;
    }

    public function setRgt(?int $rgt): self
    {
        $this->rgt = $rgt;

        return $this;
    }

    public function getAllowVideo(): ?bool
    {
        return $this->allowVideo;
    }

    public function setAllowVideo(bool $allowVideo): self
    {
        $this->allowVideo = $allowVideo;

        return $this;
    }

    public function getTitleAutoGenerated(): ?bool
    {
        return $this->titleAutoGenerated;
    }

    public function setTitleAutoGenerated(bool $titleAutoGenerated): self
    {
        $this->titleAutoGenerated = $titleAutoGenerated;

        return $this;
    }

    public function getScreenType(): ?string
    {
        return $this->screenType;
    }

    public function setScreenType(string $screenType): self
    {
        $this->screenType = $screenType;

        return $this;
    }

    public function getAllowFree(): ?bool
    {
        return $this->allowFree;
    }

    public function setAllowFree(bool $allowFree): self
    {
        $this->allowFree = $allowFree;

        return $this;
    }

    public function getDescriptionLengthMax(): ?int
    {
        return $this->descriptionLengthMax;
    }

    public function setDescriptionLengthMax(int $descriptionLengthMax): self
    {
        $this->descriptionLengthMax = $descriptionLengthMax;

        return $this;
    }

    public function getEnabled360View(): ?bool
    {
        return $this->enabled360View;
    }

    public function setEnabled360View(bool $enabled360View): self
    {
        $this->enabled360View = $enabled360View;

        return $this;
    }

    public function getMinPhotos(): ?int
    {
        return $this->minPhotos;
    }

    public function setMinPhotos(int $minPhotos): self
    {
        $this->minPhotos = $minPhotos;

        return $this;
    }

    public function getMaxPhotos(): ?int
    {
        return $this->maxPhotos;
    }

    public function setMaxPhotos(int $maxPhotos): self
    {
        $this->maxPhotos = $maxPhotos;

        return $this;
    }

    public function getAllowSecureDeal(): ?bool
    {
        return $this->allowSecureDeal;
    }

    public function setAllowSecureDeal(bool $allowSecureDeal): self
    {
        $this->allowSecureDeal = $allowSecureDeal;

        return $this;
    }

    public function getMaxVideoDuration(): ?int
    {
        return $this->maxVideoDuration;
    }

    public function setMaxVideoDuration(int $maxVideoDuration): self
    {
        $this->maxVideoDuration = $maxVideoDuration;

        return $this;
    }

    public function getMapDisplayType(): ?string
    {
        return $this->mapDisplayType;
    }

    public function setMapDisplayType(string $mapDisplayType): self
    {
        $this->mapDisplayType = $mapDisplayType;

        return $this;
    }

    public function getAllowUsed(): ?bool
    {
        return $this->allowUsed;
    }

    public function setAllowUsed(bool $allowUsed): self
    {
        $this->allowUsed = $allowUsed;

        return $this;
    }

    public function getAgeRestricted(): ?bool
    {
        return $this->ageRestricted;
    }

    public function setAgeRestricted(bool $ageRestricted): self
    {
        $this->ageRestricted = $ageRestricted;

        return $this;
    }

    public function getModerationLimit(): ?int
    {
        return $this->moderationLimit;
    }

    public function setModerationLimit(int $moderationLimit): self
    {
        $this->moderationLimit = $moderationLimit;

        return $this;
    }

    public function getIdLang(): ?Lang
    {
        return $this->idLang;
    }

    public function setIdLang(?Lang $idLang): self
    {
        $this->idLang = $idLang;

        return $this;
    }

    /**
     * @return Collection<int, Country>
     */
    public function getCountryIso(): Collection
    {
        return $this->countryIso;
    }

    public function addCountryIso(Country $countryIso): self
    {
        if (!$this->countryIso->contains($countryIso)) {
            $this->countryIso[] = $countryIso;
        }

        return $this;
    }

    public function removeCountryIso(Country $countryIso): self
    {
        $this->countryIso->removeElement($countryIso);

        return $this;
    }

}
